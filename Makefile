# Copyright (c) 2011 The LevelDB Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.

#-----------------------------------------------
# Uncomment exactly one of the lines labelled (A), (B), and (C) below
# to switch between compilation modes.

# (A) Production use (optimized mode)
OPT ?= -O2 -DNDEBUG
# (B) Debug mode, w/ full line-level debugging symbols
# OPT ?= -g2
# (C) Profiling mode: opt, but w/debugging symbols
# OPT ?= -O2 -g2 -DNDEBUG
#-----------------------------------------------

# detect what platform we're building on
$(shell CC="$(CC)" CXX="$(CXX)" TARGET_OS="$(TARGET_OS)" \
    ./build_detect_platform build_config.mk ./)
# this file is generated by the previous line to set build flags and sources
include build_config.mk

CFLAGS += -I. -I./include $(PLATFORM_CCFLAGS) $(OPT)
CXXFLAGS += -I. -I./include $(PLATFORM_CXXFLAGS) $(OPT)

LDFLAGS += $(PLATFORM_LDFLAGS)
LIBS += $(PLATFORM_LIBS)

OBJDIR=static

LIBOBJECTS := $(addprefix $(OBJDIR)/, $(SOURCES:.cc=.o))
MEMENVOBJECTS := $(addprefix $(OBJDIR)/, $(MEMENV_SOURCES:.cc=.o))

TESTUTIL := $(OBJDIR)/util/testutil.o
TESTHARNESS := $(OBJDIR)/util/testharness.o $(TESTUTIL)

# Note: iOS should probably be using libtool, not ar.
ifeq ($(PLATFORM), IOS)
AR=xcrun ar
endif

TESTS = \
	db/autocompact_test \
	db/c_test \
	db/corruption_test \
	db/db_test \
	db/dbformat_test \
	db/fault_injection_test \
	db/filename_test \
	db/log_test \
	db/recovery_test \
	db/skiplist_test \
	db/version_edit_test \
	db/version_set_test \
	db/write_batch_test \
	helpers/memenv/memenv_test \
	issues/issue178_test \
	issues/issue200_test \
	table/filter_block_test \
	table/table_test \
	util/arena_test \
	util/bloom_test \
	util/cache_test \
	util/coding_test \
	util/crc32c_test \
	util/env_test \
	util/hash_test

UTILS = \
	db/db_bench \
	db/leveldbutil

# On Linux may need libkyotocabinet-dev for dependency.
BENCHMARKS = \
	doc/bench/db_bench_sqlite3 \
	doc/bench/db_bench_tree_db

# Put the object files in a subdirectory, but the application at the top of the object dir.
PROGNAMES := $(notdir $(TESTS) $(UTILS))
PROGRAMS := $(addprefix $(OBJDIR)/, $(PROGNAMES))

TESTOBJS := $(addprefix $(OBJDIR)/, $(addsuffix .o, $(TESTS)))
UTILOBJS := $(addprefix $(OBJDIR)/, $(addsuffix .o, $(UTILS)))
ALLOBJS := $(LIBOBJECTS) $(MEMENVOBJECTS) $(TESTOBJS) $(UTILOBJS) $(TESTHARNESS)

STATICLIB = $(OBJDIR)/libleveldb.a
STATICMEMENVLIB = $(OBJDIR)/libmemenv.a

default: all

# Should we build shared libraries?
ifneq ($(PLATFORM_SHARED_EXT),)

ifneq ($(PLATFORM_SHARED_VERSIONED),true)
SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)
SHARED2 = $(SHARED1)
SHARED3 = $(SHARED1)
SHAREDLIB = $(SHARED1)
else
# Update db.h if you change these.
SHARED_MAJOR = 1
SHARED_MINOR = 18
SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)
SHARED2 = $(SHARED1).$(SHARED_MAJOR)
SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)
SHAREDLIB = $(SHARED1) $(SHARED2) $(SHARED3)
$(SHARED1): $(SHARED3)
	ln -fs $(SHARED3) $(SHARED1)
$(SHARED2): $(SHARED3)
	ln -fs $(SHARED3) $(SHARED2)
endif

$(SHARED3):
	$(CXX) $(LDFLAGS) $(PLATFORM_SHARED_LDFLAGS)$(SHARED2) $(CXXFLAGS) $(PLATFORM_SHARED_CFLAGS) $(SOURCES) -o $(SHARED3) $(LIBS)

endif  # PLATFORM_SHARED_EXT

all: $(SHAREDLIB) $(STATICLIB) $(PROGRAMS)

check: all $(PROGRAMS)
	for t in $(notdir $(TESTS)); do echo "***** Running $$t"; $(OBJDIR)/$$t || exit 1; done

clean:
	-rm -rf $(OBJDIR)
	-rm -f build_config.mk
	-rm -f leveldb*
	-rm -rf ios-x86/* ios-arm/*

$(OBJDIR):
	mkdir $(OBJDIR)

$(OBJDIR)/db: | $(OBJDIR)
	mkdir $(OBJDIR)/db

$(OBJDIR)/doc/bench: | $(OBJDIR)
	mkdir -p $(OBJDIR)/doc/bench

$(OBJDIR)/helpers/memenv: | $(OBJDIR)
	mkdir -p $(OBJDIR)/helpers/memenv

$(OBJDIR)/issues: | $(OBJDIR)
	mkdir $(OBJDIR)/issues

$(OBJDIR)/port: | $(OBJDIR)
	mkdir $(OBJDIR)/port

$(OBJDIR)/table: | $(OBJDIR)
	mkdir $(OBJDIR)/table

$(OBJDIR)/util: | $(OBJDIR)
	mkdir $(OBJDIR)/util

.PHONY: OBJDIRS
OBJDIRS: \
	$(OBJDIR)/db \
	$(OBJDIR)/doc/bench \
	$(OBJDIR)/issues \
	$(OBJDIR)/port \
	$(OBJDIR)/table \
	$(OBJDIR)/util \
	$(OBJDIR)/helpers/memenv

$(ALLOBJS): | OBJDIRS

$(STATICLIB): $(LIBOBJECTS)
	rm -f $@
	$(AR) -rs $@ $(LIBOBJECTS)

$(OBJDIR)/db_bench: $(OBJDIR)/db/db_bench.o $(LIBOBJECTS) $(TESTUTIL)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/db_bench.o $(LIBOBJECTS) $(TESTUTIL) -o $@ $(LIBS)

$(OBJDIR)/db_bench_sqlite3: $(OBJDIR)/doc/bench/db_bench_sqlite3.o $(LIBOBJECTS) $(TESTUTIL)
	$(CXX) $(LDFLAGS) $(OBJDIR)/doc/bench/db_bench_sqlite3.o $(LIBOBJECTS) $(TESTUTIL) -o $@ -lsqlite3 $(LIBS)

$(OBJDIR)/db_bench_tree_db: $(OBJDIR)/doc/bench/db_bench_tree_db.o $(LIBOBJECTS) $(TESTUTIL)
	$(CXX) $(LDFLAGS) $(OBJDIR)/doc/bench/db_bench_tree_db.o $(LIBOBJECTS) $(TESTUTIL) -o $@ -lkyotocabinet $(LIBS)

$(OBJDIR)/leveldbutil: $(OBJDIR)/db/leveldbutil.o $(LIBOBJECTS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/leveldbutil.o $(LIBOBJECTS) -o $@ $(LIBS)

$(OBJDIR)/arena_test: $(OBJDIR)/util/arena_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/util/arena_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/autocompact_test: $(OBJDIR)/db/autocompact_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/autocompact_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/bloom_test: $(OBJDIR)/util/bloom_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/util/bloom_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/c_test: $(OBJDIR)/db/c_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/c_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/cache_test: $(OBJDIR)/util/cache_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/util/cache_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/coding_test: $(OBJDIR)/util/coding_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/util/coding_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/corruption_test: $(OBJDIR)/db/corruption_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/corruption_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/crc32c_test: $(OBJDIR)/util/crc32c_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/util/crc32c_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/db_test: $(OBJDIR)/db/db_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/db_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/dbformat_test: $(OBJDIR)/db/dbformat_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/dbformat_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/env_test: $(OBJDIR)/util/env_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/util/env_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/fault_injection_test: $(OBJDIR)/db/fault_injection_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/fault_injection_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/filename_test: $(OBJDIR)/db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/filter_block_test: $(OBJDIR)/table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/hash_test: $(OBJDIR)/util/hash_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/util/hash_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/issue178_test: $(OBJDIR)/issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/issue200_test: $(OBJDIR)/issues/issue200_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/issues/issue200_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/log_test: $(OBJDIR)/db/log_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/log_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/recovery_test: $(OBJDIR)/db/recovery_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/recovery_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/table_test: $(OBJDIR)/table/table_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/table/table_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/skiplist_test: $(OBJDIR)/db/skiplist_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/skiplist_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/version_edit_test: $(OBJDIR)/db/version_edit_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/version_edit_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/version_set_test: $(OBJDIR)/db/version_set_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/version_set_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(OBJDIR)/write_batch_test: $(OBJDIR)/db/write_batch_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/db/write_batch_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)

$(STATICMEMENVLIB): $(MEMENVOBJECTS)
	rm -f $@
	$(AR) -rs $@ $(MEMENVOBJECTS)

$(OBJDIR)/memenv_test: $(OBJDIR)/helpers/memenv/memenv_test.o $(STATICMEMENVLIB) $(STATICLIB) $(TESTHARNESS)
	$(CXX) $(LDFLAGS) $(OBJDIR)/helpers/memenv/memenv_test.o $(STATICMEMENVLIB) $(STATICLIB) $(TESTHARNESS) -o $@ $(LIBS)

ifeq ($(PLATFORM), IOS)
# For iOS, create universal object files to be used on both the simulator and
# a device.
SIMULATORSDK=$(shell xcrun -sdk iphonesimulator --show-sdk-path)
DEVICESDK=$(shell xcrun -sdk iphoneos --show-sdk-path)
IOSARCH=-arch armv6 -arch armv7 -arch armv7s -arch arm64

.cc.o:
	mkdir -p ios-x86/$(dir $@)
	xcrun -sdk iphonesimulator $(CXX) $(CXXFLAGS) -isysroot "$(SIMULATORSDK)" -arch i686 -arch x86_64 -c $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	xcrun -sdk iphoneos $(CXX) $(CXXFLAGS) -isysroot "$(DEVICESDK)" $(IOSARCH) -c $< -o ios-arm/$@
	xcrun lipo ios-x86/$@ ios-arm/$@ -create -output $@

.c.o:
	mkdir -p ios-x86/$(dir $@)
	xcrun -sdk iphonesimulator $(CC) $(CFLAGS) -isysroot "$(SIMULATORSDK)" -arch i686 -arch x86_64 -c $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	xcrun -sdk iphoneos $(CC) $(CFLAGS) -isysroot "$(DEVICESDK)" $(IOSARCH) -c $< -o ios-arm/$@
	xcrun lipo ios-x86/$@ ios-arm/$@ -create -output $@

else
$(OBJDIR)/%.o: %.cc
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
endif
